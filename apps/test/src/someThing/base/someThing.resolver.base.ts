/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSomeThingArgs } from "./CreateSomeThingArgs";
import { UpdateSomeThingArgs } from "./UpdateSomeThingArgs";
import { DeleteSomeThingArgs } from "./DeleteSomeThingArgs";
import { SomeThingCountArgs } from "./SomeThingCountArgs";
import { SomeThingFindManyArgs } from "./SomeThingFindManyArgs";
import { SomeThingFindUniqueArgs } from "./SomeThingFindUniqueArgs";
import { SomeThing } from "./SomeThing";
import { Customer } from "../../customer/base/Customer";
import { SomeThingService } from "../someThing.service";
@graphql.Resolver(() => SomeThing)
export class SomeThingResolverBase {
  constructor(protected readonly service: SomeThingService) {}

  async _someThingsMeta(
    @graphql.Args() args: SomeThingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SomeThing])
  async someThings(
    @graphql.Args() args: SomeThingFindManyArgs
  ): Promise<SomeThing[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SomeThing, { nullable: true })
  async someThing(
    @graphql.Args() args: SomeThingFindUniqueArgs
  ): Promise<SomeThing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SomeThing)
  async createSomeThing(
    @graphql.Args() args: CreateSomeThingArgs
  ): Promise<SomeThing> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SomeThing)
  async updateSomeThing(
    @graphql.Args() args: UpdateSomeThingArgs
  ): Promise<SomeThing | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SomeThing)
  async deleteSomeThing(
    @graphql.Args() args: DeleteSomeThingArgs
  ): Promise<SomeThing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async resolveFieldCustomer(
    @graphql.Parent() parent: SomeThing
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
